name: build-go-app
on:
  workflow_call:
    inputs:
      app_name:
        type: string
        default: ${{ github.event.repository.name }}
      app_version:
        type: string
        default: ${{ github.ref_name }}
      go_version:
        type: string
        default: '1.22'
      dockerfile:
        type: string
        default: '.ci/go/Dockerfile'
      go_private:
        type: string
      registry_host:
        type: string
      registry_user:
        type: string
      govulncheck_enabled:
        type: boolean
        default: true
      golangcilint_enabled:
        type: boolean
        default: true
    secrets:
      private_key:
        required: false
      registry_password:
        required: false

jobs:
  govulncheck:
    runs-on: ubuntu-latest
    if: ${{ inputs.govulncheck_enabled == true }}
    steps:
      - uses: actions/checkout@v4
      - uses: ashep/go-ci/actions/go-private@v1
        with:
          go_private: ${{ inputs.go_private }}
          private_key: ${{ secrets.private_key }}
      - uses: golang/govulncheck-action@v1
        with:
          go-version-input: ${{ inputs.go_version }}

  golangci-lint:
    runs-on: ubuntu-latest
    if: ${{ inputs.golangcilint_enabled == true }}
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}
      - uses: ashep/go-ci/actions/setup-golangci-lint@v1
      - run: golangci-lint run ./...

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}
      - uses: ashep/go-ci/actions/go-private@v1
        with:
          go_private: ${{ inputs.go_private }}
          private_key: ${{ secrets.private_key }}
      - run: go mod tidy
      - run: go mod vendor
      - run: go test -race ./...

  func-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}
      - uses: ashep/go-ci/actions/go-private@v1
        with:
          go_private: ${{ inputs.go_private }}
          private_key: ${{ secrets.private_key }}
      - run: go mod tidy
      - run: go mod vendor
      - run: |
          if [ -f docker-compose.tests.yaml ];
            then docker compose -p {{.APP_NAME}}_tests -f docker-compose.tests.yaml up --remove-orphans -d
            docker compose -p {{.APP_NAME}}_tests -f docker-compose.tests.yaml run --rm --remove-orphans tests go test -v -mod=vendor -tags=functest ./tests/...
          fi

  build-image:
    runs-on: ubuntu-latest
    if: ${{ inputs.registry_user != '' }}
    needs:
      - unit-tests
      - func-tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: ashep/ci
          ref: v1
          path: .ci
      - uses: ashep/go-ci/actions/go-private@v1
        with:
          go_private: ${{ inputs.go_private }}
          private_key: ${{ secrets.private_key }}
      - uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry_host }}
          username: ${{ inputs.registry_user }}
          password: ${{ secrets.registry_password }}
      - uses: ashep/ci/actions/build-image@v1
        if: github.ref_name == 'main'
        with:
          app_name: ${{ inputs.app_name }}
          app_version: ${{ inputs.app_version }}
          dockerfile: ${{ inputs.dockerfile }}
          registry_host: ${{ inputs.registry_host }}
          registry_user: ${{ inputs.registry_user }}
          tag_name: latest
      - uses: ashep/ci/actions/build-image@v1
        if: github.ref_name != 'main'
        with:
          app_name: ${{ inputs.app_name }}
          app_version: ${{ inputs.app_version }}
          dockerfile: ${{ inputs.dockerfile }}
          registry_host: ${{ inputs.registry_host }}
          registry_user: ${{ inputs.registry_user }}
          tag_name: dev
      - uses: ashep/ci/actions/build-image@v1
        if: github.ref_type == 'tag'
        with:
          app_name: ${{ inputs.app_name }}
          app_version: ${{ inputs.app_version }}
          dockerfile: ${{ inputs.dockerfile }}
          registry_host: ${{ inputs.registry_host }}
          registry_user: ${{ inputs.registry_user }}
          tag_name: ${{ github.ref_name }}

name: deploy-docker
on:
  workflow_call:
    inputs:
      workdir:
        type: string
        default: "."
      app_name:
        type: string
        default: ${{ github.event.repository.name }}
      app_version:
        type: string
        default: ""
      compose_filename:
        type: string
        required: false
        default: docker-compose.yaml
    secrets:
      ssh_host:
        required: true
      ssh_port:
        required: true
      ssh_user:
        required: true
      ssh_key:
        required: true
      dotenv:
        required: false
      pre_script:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Add .env variables
        run: |
          (cat <<EOF
          ${{ secrets.dotenv }}
          EOF
          ) >> ${{ inputs.workdir }}/.env

          APP_VERSION="${{ inputs.app_version }}"
          if [ -z "$APP_VERSION" ]; then
            if [ "${{ github.ref_type }}" == "tag" ]; then
              APP_VERSION="${{ github.ref_name }}"
            else
              APP_VERSION=$(echo "${{ github.sha }}" | cut -c 1-7)
            fi
          fi

          (cat <<EOF
          APP_OWNER=${{ github.repository_owner }}
          APP_NAME=${{ inputs.app_name }}
          APP_VERSION=${APP_VERSION}
          EOF
          ) >> ${{ inputs.workdir }}/.env
      - name: Run pre-script
        shell: bash
        run: ${{ secrets.pre_script }}
      - name: Deploy
        shell: bash
        run: |
          mkdir -p ~/.ssh

          (cat <<EOF
          ${{ secrets.ssh_key }}
          EOF
          ) > ssh_id
          chmod 0600 ssh_id

          eval $(ssh-agent -s)
          ssh-keyscan -H -p ${{ secrets.ssh_port }} ${{ secrets.ssh_host }} > ~/.ssh/known_hosts
          ssh-add ssh_id

          cd ${{ inputs.workdir }}
          docker context create remote --docker "host=ssh://${{ secrets.ssh_user }}@${{ secrets.ssh_host }}:${{ secrets.ssh_port }}"
          docker --context remote compose -f ${{ inputs.compose_filename }} up -d --always-recreate-deps --force-recreate

version: '3'

tasks:
  build:
    desc: Build a Docker image
    cmds:
      - if [ -z "{{.APP_NAME}}" ]; then echo "APP_NAME var is not set"; exit 1; fi
      - if [ -z "{{.APP_VERSION}}" ]; then echo "APP_VERSION var is not set"; exit 1; fi
      - if [ -z "{{.ARCH}}" ]; then echo "ARCH var is not set"; exit 1; fi
      - docker build --build-arg ARCH={{.ARCH}} --build-arg APP_NAME={{.APP_NAME}} --build-arg APP_VERSION={{.APP_VERSION}} -t {{.APP_NAME}}:{{.APP_VERSION}} -f .ci/Dockerfile .

  push:
    desc: Push a Docker image
    vars:
      REGISTRY_USER:
        sh: if [ ! -z "{{.REGISTRY_HOST}}" ]; then echo "{{.REGISTRY_HOST}}/{{.REGISTRY_USER}}"; else echo "{{.REGISTRY_USER}}";  fi
    cmds:
      - if [ -z "{{.APP_NAME}}" ]; then echo "APP_NAME var is not set"; exit 1; fi
      - if [ -z "{{.APP_VERSION}}" ]; then echo "APP_VERSION var is not set"; exit 1; fi
      - if [ -z "{{.REGISTRY_USER}}" ]; then echo "REGISTRY_USER var is not set"; exit 1; fi
      - if [ -z "{{.TAG_NAME}}" ]; then echo "TAG_NAME var is not set"; exit 1; fi
      - docker tag {{.APP_NAME}}:{{.APP_VERSION}} {{.REGISTRY_USER}}/{{.APP_NAME}}:{{.TAG_NAME}}
      - docker push {{.REGISTRY_USER}}/{{.APP_NAME}}:{{.TAG_NAME}}

  save:
    desc: Save a Docker image to a file
    cmds:
      - if [ -z "{{.APP_NAME}}" ]; then echo "APP_NAME var is not set"; exit 1; fi
      - if [ -z "{{.APP_VERSION}}" ]; then echo "APP_VERSION var is not set"; exit 1; fi
      - mkdir -p tmp/app_image
      - docker save -o tmp/app_image/{{.APP_NAME}}_{{.APP_VERSION}}.tar {{.APP_NAME}}:{{.APP_VERSION}}

  load:
    desc: Load a Docker image from a file
    cmds:
      - if [ -z "{{.APP_NAME}}" ]; then echo "APP_NAME var is not set"; exit 1; fi
      - if [ -z "{{.APP_VERSION}}" ]; then echo "APP_VERSION var is not set"; exit 1; fi
      - docker load -i tmp/app_image/{{.APP_NAME}}_{{.APP_VERSION}}.tar
